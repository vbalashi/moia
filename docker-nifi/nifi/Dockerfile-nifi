ARG BASE_IMAGE_NAME=rhel-base
ARG BASE_IMAGE_TAG=8.10-1132.1733300785
FROM ${BASE_IMAGE_NAME}:${BASE_IMAGE_TAG}

ARG MAINTAINER="Apache NiFi <dev@nifi.apache.org>"
LABEL maintainer="${MAINTAINER}"
LABEL site="https://nifi.apache.org"

USER 0

ARG NIFI_VERSION
ARG NIFI_BINARY_URL
ARG NIFI_COMPONENTS_BASE_DIR
ARG NAR_EXTENSIONS_DIR

ENV NIFI_BASE_DIR=/opt/nifi
ENV NIFI_HOME=${NIFI_BASE_DIR}/nifi-current
ENV NIFI_TOOLKIT_HOME=${NIFI_BASE_DIR}/nifi-toolkit-current
ENV NIFI_PID_DIR=${NIFI_HOME}/run
ENV NIFI_LOG_DIR=/var/logs

ADD ${NIFI_COMPONENTS_BASE_DIR}/sh/ ${NIFI_BASE_DIR}/scripts/
ADD ${NIFI_COMPONENTS_BASE_DIR}/libs/ ${NIFI_BASE_DIR}/libs/

RUN chmod -R +x ${NIFI_BASE_DIR}/scripts/*.sh \
    && yum update -y \
    && yum upgrade curl -y \
    && yum install -y unzip 

ARG POSTGRESQL_BASE_URL=https://download.postgresql.org/pub/repos/yum/16/redhat/rhel-8-x86_64
ARG POSTGRESQL_LIBS=postgresql16-libs-16.0-1PGDG.rhel8.x86_64.rpm 
ARG POSTGRESQL_ODBC=postgresql16-odbc-16.00.0000-1PGDG.rhel8.x86_64.rpm

# Setup NiFi user and create necessary directories
RUN --mount=type=cache,target=/var/cache/downloads \
    mkdir -p ${NIFI_BASE_DIR} \
    && yum update -y \
    && yum install -y jq xmlstarlet procps-ng libpq binutils \
    && yum install -y python3 \
    && yum install -y unixODBC \
    && for PKG in ${POSTGRESQL_LIBS} ${POSTGRESQL_ODBC}; do \
        if [ ! -f "/var/cache/downloads/${PKG}" ]; then \
            curl -fSL ${POSTGRESQL_BASE_URL}/${PKG} -o "/var/cache/downloads/${PKG}"; \
        fi; \
        cp "/var/cache/downloads/${PKG}" ${NIFI_BASE_DIR}/; \
    done \
    && rpm -i ${NIFI_BASE_DIR}/${POSTGRESQL_LIBS} \
    && rpm -i ${NIFI_BASE_DIR}/${POSTGRESQL_ODBC} \
    && rm -rf ${NIFI_BASE_DIR}/${POSTGRESQL_LIBS} \
    && rm -rf ${NIFI_BASE_DIR}/${POSTGRESQL_ODBC}

# Key change: Set permissions immediately after directory creation
RUN mkdir -p ${NIFI_HOME}/conf \
    && mkdir -p ${NIFI_HOME}/database_repository \
    && mkdir -p ${NIFI_HOME}/flowfile_repository \
    && mkdir -p ${NIFI_HOME}/content_repository \
    && mkdir -p ${NIFI_HOME}/provenance_repository \
    && mkdir -p ${NIFI_HOME}/python_extensions \
    && mkdir -p ${NIFI_HOME}/nar_extensions \
    && mkdir -p ${NIFI_HOME}/templates \
    && mkdir -p ${NIFI_HOME}/state \
    && mkdir -p ${NIFI_LOG_DIR} \
    # Set permissions immediately
    && chown -R 1001:0 ${NIFI_BASE_DIR} \
    && chown -R 1001:0 ${NIFI_LOG_DIR} \
    && chmod -R 775 ${NIFI_HOME} \
    && chmod -R 775 ${NIFI_LOG_DIR} \
    && chmod -R g=u ${NIFI_BASE_DIR}

# Add this new section for runtime directories
RUN mkdir -p ${NIFI_HOME}/run \
    && chown -R 1001:0 ${NIFI_HOME}/run \
    && chmod -R 775 ${NIFI_HOME}/run

# Remove duplicate permission settings at the end
# Keep only necessary final checks
RUN chgrp -R 0 ${NIFI_BASE_DIR} \
    && chmod -R g=u ${NIFI_BASE_DIR}

# First RUN: Download and extract NiFi with verification
RUN --mount=type=cache,target=/var/cache/downloads \
    NIFI_BINARY_FILENAME="nifi-${NIFI_VERSION}-bin.zip" && \
    CACHE_FILE="/var/cache/downloads/${NIFI_BINARY_FILENAME}" && \
    if [ ! -f "${CACHE_FILE}" ]; then \
        curl -fSL ${NIFI_BINARY_URL} -o "${CACHE_FILE}"; \
    fi && \
    cp "${CACHE_FILE}" ${NIFI_BASE_DIR}/ && \
    unzip ${NIFI_BASE_DIR}/${NIFI_BINARY_FILENAME} -d ${NIFI_BASE_DIR} && \
    rm ${NIFI_BASE_DIR}/${NIFI_BINARY_FILENAME} && \
    mv ${NIFI_BASE_DIR}/nifi-${NIFI_VERSION} ${NIFI_HOME} && \
    echo "=== After extraction ===" && \
    ls -la ${NIFI_BASE_DIR} && \
    ls -la ${NIFI_HOME}

# Second RUN: Create directories with verification
RUN mkdir -p ${NIFI_HOME}/conf \
    ${NIFI_HOME}/database_repository \
    ${NIFI_HOME}/flowfile_repository \
    ${NIFI_HOME}/content_repository \
    ${NIFI_HOME}/provenance_repository \
    ${NIFI_HOME}/python_extensions \
    ${NIFI_HOME}/nar_extensions \
    ${NIFI_HOME}/templates \
    ${NIFI_HOME}/state \
    ${NIFI_HOME}/bin \
    ${NIFI_LOG_DIR} && \
    echo "=== After directory creation ===" && \
    ls -la ${NIFI_HOME} && \
    ls -la ${NIFI_HOME}/bin

# Third RUN: Create symbolic link and nifi-env.sh with verification
RUN mkdir -p ${NIFI_HOME}/bin && \
    ln -s ${NIFI_HOME} ${NIFI_BASE_DIR}/nifi-${NIFI_VERSION} && \
    echo '#!/bin/sh' > ${NIFI_HOME}/bin/nifi-env.sh && \
    echo 'export JAVA_OPTS="-Djava.awt.headless=true --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED"' >> ${NIFI_HOME}/bin/nifi-env.sh && \
    chmod +x ${NIFI_HOME}/bin/nifi-env.sh && \
    echo "=== Final structure ===" && \
    ls -la ${NIFI_BASE_DIR} && \
    ls -la ${NIFI_HOME}/bin && \
    cat ${NIFI_HOME}/bin/nifi-env.sh

COPY ${NIFI_COMPONENTS_BASE_DIR}/scripts ${NIFI_HOME}/python_extensions/
COPY ${NIFI_COMPONENTS_BASE_DIR}/${NAR_EXTENSIONS_DIR} ${NIFI_HOME}/nar_extensions/
COPY ${NIFI_COMPONENTS_BASE_DIR}/odbc /etc/
COPY ${NIFI_COMPONENTS_BASE_DIR}/templates ${NIFI_HOME}/templates/
COPY ${NIFI_COMPONENTS_BASE_DIR}/conf ${NIFI_HOME}/conf/

VOLUME ${NIFI_LOG_DIR} \
       ${NIFI_HOME}/conf \
       ${NIFI_HOME}/database_repository \
       ${NIFI_HOME}/flowfile_repository \
       ${NIFI_HOME}/content_repository \
       ${NIFI_HOME}/provenance_repository \
       ${NIFI_HOME}/python_extensions \
       ${NIFI_HOME}/nar_extensions \
       ${NIFI_HOME}/templates \
       ${NIFI_HOME}/state 

# Add these JVM arguments to allow access to internal classes
ENV JAVA_OPTS="-Djava.awt.headless=true \
    --add-opens=java.base/sun.nio.ch=ALL-UNNAMED \
    --add-opens=java.base/java.io=ALL-UNNAMED"

# Make sure this is set before the ENTRYPOINT
RUN echo "#!/bin/sh\n\
export JAVA_OPTS=\"${JAVA_OPTS}\"\n" > $NIFI_HOME/bin/nifi-env.sh

RUN chgrp -R 0 ${NIFI_BASE_DIR} \
    && chmod -R g=u ${NIFI_BASE_DIR}

# Web HTTP(s) & Socket Site-to-Site Ports
EXPOSE 8443/tcp 10000/tcp 8000/tcp

WORKDIR ${NIFI_HOME}

USER 1001

ENTRYPOINT ["../scripts/start.sh"]